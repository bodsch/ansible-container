#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# (c) 2021, Bodo Schulz <bodo@boone-schulz.de>
# BSD 2-clause (see LICENSE or https://opensource.org/licenses/BSD-2-Clause)

from __future__ import absolute_import, division, print_function
import os
import hashlib
import json

from ansible.module_utils.basic import AnsibleModule


class ContainerProperties(object):

    def __init__(self, module):

        self.module = module

        self.state = module.params.get("state")
        self.dest = module.params.get("dest")
        self.properties = module.params.get("properties")

        self.checksum_file = "{}.checksum".format(self.dest)

        # self.module.log(msg="------------------------------")
        # self.module.log(msg="state          {}".format(self.state))
        # self.module.log(msg="dest           {}".format(self.dest))
        # self.module.log(msg="checksum_file  {}".format(self.checksum_file))
        # self.module.log(msg="properties     {}".format(self.properties))
        # self.module.log(msg="------------------------------")

    def run(self):

        result = dict(
            changed=False,
            failed=True,
            msg="initial"
        )

        _old_checksum = ""

        # if os.path.exists(self.dest):
        #     """
        #       read existing file
        #     """
        #     self.module.log(msg=" - found properties file {}".format(self.dest))
        #
        #     #with open(self.dest) as f:
        #     #    _old_data = f.readlines()
        #         # self.module.log(msg="{}".format(data))
        #         # self.module.log(msg="{}".format(len(data)))

        if os.path.exists(self.checksum_file):
            """
            """
            # self.module.log(msg=" - found properties checksum {}".format(self.checksum_file))

            with open(self.checksum_file, "r") as f:
                _old_checksum = f.readlines()[0]

        data = self.__template(self.properties)
        checksum = self.__checksum(data)

        properties_up2date = (_old_checksum == checksum)

        # self.module.log(msg=" - '{}'".format(checksum))
        # self.module.log(msg=" - '{}'".format(_old_checksum))
        # self.module.log(msg=" - '{}'".format(properties_up2date))
        #
        # self.module.log(msg=" - {}".format(data))
        # self.module.log(msg=" - {}".format(checksum))

        if properties_up2date:
            """
              alles gleich
            """
            return dict(
                changed=False,
                failed=False,
                msg="no changes"
            )

        with open(self.dest, "w") as f:
            f.write(data)

            with open(self.checksum_file, "w") as f:
                f.write(checksum)

            result = dict(
                changed=True,
                failed=False,
                msg="property file successful written"
            )

        return result

    def __checksum(self, plaintext):
        """
        """
        if isinstance(plaintext, dict):
            password_bytes = json.dumps(plaintext, sort_keys=True).encode('utf-8')
        else:
            password_bytes = plaintext.encode('utf-8')

        password_hash = hashlib.sha256(password_bytes)
        return password_hash.hexdigest()

    def __template(self, data):
        """
          generate data from dictionary
        """
        tpl = """
# generated by ansible
{%- for key, value in item.items() %}
{{ key.ljust(30) }} = {{ value }}
{%- endfor %}

"""
        from jinja2 import Template

        tm = Template(tpl)
        d = tm.render(item=data)

        return d


# ===========================================
# Module execution.
#


def main():

    module = AnsibleModule(
        argument_spec=dict(
            state=dict(default="present", choices=["absent", "present"]),
            dest=dict(required=True),
            properties=dict(required=True, type='dict'),
        ),
        supports_check_mode=True,
    )

    p = ContainerProperties(module)
    result = p.run()

    module.log(msg="= result: {}".format(result))

    module.exit_json(**result)


# import module snippets
if __name__ == '__main__':
    main()
