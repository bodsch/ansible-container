---

- name: install dependency
  package:
    name: "{{ container_packages }}"
    state: present

- name: merge container registry configuration between defaults and custom
  set_fact:
    container_registry: "{{ container_registry_default |
      combine( container_registry, recursive=True ) }}"

- name: get container_names from container
  set_fact:
    container_names: "{{ container | container_names }}"

- name: get container_images from container
  set_fact:
    container_images: "{{ container | container_images }}"

- name: detect container volumes
  set_fact:
    container_volumes: "{{ container | container_volumes }}"

- name: create base directory to persist docker environnments
  become: true
  file:
    name: "{{ container_env_directory }}"
    state: directory
    mode: 0o755

- name: create application directory to persist docker environnments
  become: true
  file:
    name: "{{ container_env_directory }}/{{ item }}"
    state: directory
    owner: '1000'
    group: '1000'
    mode: 0o775
  with_items: "{{ container_names }}"
  loop_control:
    label: "{{ item }}"

- name: persist application docker environnments
  template:
    src: container.env.j2
    dest: "{{ container_env_directory }}/{{ item.name }}/container.env"
    mode: 0o755
  with_items: "{{ container }}"
  loop_control:
    label: "{{ item.name }}"

- name: persist application properties
  container_properties:
    dest: "{{ container_env_directory }}/{{ item.name }}/{{ item.name }}.properties"
    properties: "{{ item.properties }}"
  loop: "{{ container }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.properties is defined

- name: create container volumes
  become: true
  file:
    name: "{{ item.local }}"
    state: directory
    owner: "{{ item.ansible.owner | default(omit) }}"
    group: "{{ item.ansible.group | default(omit) }}"
    mode: "{{ item.ansible.mode | default(omit) }}"
  loop: "{{ container_volumes }}"
  loop_control:
    label: "{{ item.local }} /
      ignore: {{ item.ansible.ignore | default('false') | bool }}
      owner: {{ item.ansible.owner | default('-') }}
      group: {{ item.ansible.group | default('-') }}
      mode: {{ item.ansible.mode   | default('-') }}"
  when:
    - not item.ansible.ignore | default('false') | bool

- name: remove environnments from container
  set_fact:
    container: "{{ container | remove_values('environments') }}"

- name: remove properties from container
  set_fact:
    container: "{{ container | remove_values('properties') }}"

- name: make sure ansible local facts directory exists
  become: true
  file:
    dest: /etc/ansible/facts.d
    state: directory
    owner: root
    group: root
    mode: 0o777

- name: validate pre tasks
  block:
    - name: ensure tasks are available
      stat:
        path: "{{ item }}"
        get_checksum: false
        get_md5: false
        get_mime: false
        get_attributes: false
      register: _pre_task_available
      loop: "{{ container_pre_tasks }}"

    - name: debuf
      debug:
        msg: "{{ _pre_task_available | map(attribute='exists') }}"
  when:
    - container_pre_tasks is defined
    - container_pre_tasks | count > 0

- name: validate post tasks
  block:
    - name: ensure tasks are available
      stat:
        path: "{{ item }}"
        get_checksum: false
        get_md5: false
        get_mime: false
        get_attributes: false
      register: _post_task_available
      loop: "{{ container_post_tasks }}"

    - name: debuf
      debug:
        msg: "{{ _post_task_available }}"
  when:
    - container_post_tasks is defined
    - container_post_tasks | count > 0




...
